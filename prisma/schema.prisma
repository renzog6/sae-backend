// filepath: sae-backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Base models
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  username  String?  @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// Company related models
model Company {
  id           Int      @id @default(autoincrement())
  cuit         String   @unique @db.VarChar(20) // obligatorio y optimizado
  name         String
  businessName String?  @db.VarChar(255)
  information  String? 

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  businessCategoryId Int?
  businessCategory   BusinessCategory?  @relation(fields: [businessCategoryId], references: [id])
  contacts           ContactLink[]
  addresses          Address[]
  employees          Employee[]
  equipment          Equipment[]
  products           ProductCompany[]
  parts              PartOrderCompany[]

  @@index([businessName])
  @@map("companies")
}

model BusinessCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  code        String? @unique
  information String?

  // Relations
  companies     Company[]
  subCategories BusinessSubCategory[]

  @@map("business_categories")
}

model BusinessSubCategory {
  id                 Int     @id @default(autoincrement())
  name               String
  description        String?
  businessCategoryId Int

  // Relations
  businessCategory BusinessCategory @relation(fields: [businessCategoryId], references: [id])

  @@unique([businessCategoryId, name]) // evita duplicados dentro de la misma categoría
  @@map("business_subcategories")
}


// Contact related models
model Contact {
  id          Int         @id @default(autoincrement())
  type        ContactType
  value       String
  label       String?
  information String?     @default("")
  
  // Relaciones polimórficas
  contactLinks ContactLink[]

  @@map("contacts")
}

enum ContactType {
  EMAIL
  PHONE
  WHATSAPP
  TELEGRAM
  INSTAGRAM
  LINKEDIN
  OTHER
}

model ContactLink {
  id         Int       @id @default(autoincrement())
  contactId  Int
  contact    Contact   @relation(fields: [contactId], references: [id])

  companyId  Int?
  company    Company?  @relation(fields: [companyId], references: [id])

  personId   Int?
  person     Person?   @relation(fields: [personId], references: [id])

  @@index([companyId])
  @@index([personId])
  @@map("contact_links")
}



// Location related models
model Country {
  id      Int    @id @default(autoincrement())
  name    String @unique
  isoCode String @unique // ISO 3166-1 alpha-2 (ej: AR, US, ES)
  code    String? // Código numérico del país
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  provinces Province[]

  @@index([isoCode])
  @@map("countries")
}

model Province {
  id   Int    @id @default(autoincrement())
  code String @unique @map("code")
  name String @map("name")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  countryId Int @map("country_id")
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities    City[]

  @@index([countryId])
  @@map("provinces")
}

model City {
  id         Int    @id @default(autoincrement())
  name       String @map("name")
  postalCode String @map("postal_code")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  provinceId Int    @map("province_id")
  province  Province  @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  addresses Address[]

  @@index([provinceId])
  @@index([postalCode])
  @@map("cities")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String?  @map("street") // Calle
  number     String?  @map("number") // Número
  floor      String?  @map("floor") // Piso
  apartment  String?  @map("apartment") // Departamento
  postalCode String?  @map("postal_code")
  latitude   Decimal? @db.Decimal(10, 7)
  longitude  Decimal? @db.Decimal(10, 7)
  
  // Campos adicionales
  neighborhood String? @map("neighborhood") // Barrio
  reference    String? @map("reference") // Referencia
  isActive     Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cityId Int @map("city_id")
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  // Polimorfismo simple: puede pertenecer a persona o empresa
  person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId Int?    @unique @map("person_id")

  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int?     @map("company_id")

  @@index([cityId])
  @@index([personId])
  @@index([companyId])
  @@index([postalCode])
  @@map("addresses")
}

// ==================================
// ENUMS
// ==================================
enum EmployeeStatus {
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum PersonStatus {
  ACTIVE
  INACTIVE
}

// ==================================
// EMPLOYEE RELATED MODELS
// ==================================
model Employee {
  id          Int             @id @default(autoincrement())
  information String?         
  status      EmployeeStatus  @default(ACTIVE)
  hireDate    DateTime        
  endDate     DateTime?       
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  companyId Int?     
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  categoryId Int              
  category   EmployeeCategory @relation(fields: [categoryId], references: [id])

  positionId Int              
  position   EmployeePosition @relation(fields: [positionId], references: [id])

  personId Int     @unique
  person   Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  vacations   EmployeeVacation[]
  inspections Inspection[]

  @@index([companyId])
  @@index([categoryId])
  @@index([positionId])
  @@index([companyId, categoryId])
  @@index([companyId, status])
  @@map("employees")
}

model EmployeeCategory {
  id          Int      @id @default(autoincrement())
  name        String   
  code        String?  
  information String?  
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employees Employee[]

  @@map("employee_categories")
  @@index([name])
  @@index([code])
}

model EmployeePosition {
  id          Int      @id @default(autoincrement())
  name        String   
  code        String?  
  information String?  
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employees Employee[]

  @@map("employee_positions")
  @@index([name])
  @@index([code])
}

model EmployeeVacation {
  id             Int      @id @default(autoincrement())
  detail         String?  
  days           Int?     
  year           Int?     
  information    String?  
  startDate      DateTime 
  settlementDate DateTime 

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  employeeId Int      
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@map("employee_vacations")
  @@index([year])
  @@index([startDate])
}

// ==================================
// PERSON RELATED MODELS
// ==================================
model Person {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  birthDate     DateTime?
  dni           String?        @unique // dni no se modifica ni se traduce
  cuil          String?        @unique // cuil no se modifica ni se traduce
  gender        Gender?
  maritalStatus MaritalStatus?
  information   String?
  status        PersonStatus?  @default(ACTIVE)
  address       Address?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  contacts     ContactLink[]
  employee     Employee?
  relatives    Family[]  @relation("Person_Family")
  isRelativeOf Family[]  @relation("Relative_Person")

  @@map("persons")
  @@index([lastName])
  @@index([firstName])
}

model Family {
  id           Int    @id @default(autoincrement())
  relationship String @map("relacion")

  // Relations
  personId  Int
  person    Person @relation("Person_Family", fields: [personId], references: [id], onDelete: Cascade)

  relativeId Int
  relative   Person @relation("Relative_Person", fields: [relativeId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([relativeId])
  @@map("family_relationships")
}


// Equipment related models
model Equipment {
  id           Int      @id @default(autoincrement())
  name         String?  @map("nombre")
  number       String?  @map("numero")
  description  String?  @map("descripcion")
  observation  String?  @map("observacion")
  year         String?  @map("anio")
  chassis      String?  @map("chasis")
  engine       String?  @map("motor")
  licensePlate String?  @map("patente")
  color        String?
  information  String?  @map("info")
  diesel       Boolean? @map("gasoil")
  status       Boolean? @map("estado")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  companyId Int?     @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])

  categoryId Int?               @map("category_id")
  category   EquipmentCategory? @relation(fields: [categoryId], references: [id])

  typeId Int?           @map("type_id")
  type   EquipmentType? @relation(fields: [typeId], references: [id])

  modelId Int?            @map("model_id")
  model   EquipmentModel? @relation(fields: [modelId], references: [id])

  parts       PartOrderEquipment[]
  inspections Inspection[]

  @@index([companyId])
  @@index([categoryId])
  @@index([typeId])
  @@index([modelId])
  @@map("equipment")
}

model EquipmentCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique @map("nombre")
  description String? @map("descripcion")

  // Relations
  equipment Equipment[]
  types     EquipmentType[]

  @@map("equipment_categories")
}

model EquipmentType {
  id          Int     @id @default(autoincrement())
  name        String  @map("nombre")
  description String? @map("descripcion")
  categoryId  Int?    @map("category_id")

  // Relations
  equipment Equipment[]
  category  EquipmentCategory? @relation(fields: [categoryId], references: [id])

  @@unique([name, categoryId])
  @@index([categoryId])
  @@map("equipment_types")
}

model EquipmentModel {
  id          Int     @id @default(autoincrement())
  name        String  @map("nombre")
  year        Int?    @map("anio")
  information String? @map("info")
  description String? @map("descripcion")
  typeId      Int?    @map("type_id")

  // Relations
  equipment Equipment[]
  parts     PartOrderEquipmentModel[]

  @@index([typeId])
  @@map("equipment_models")
}

// Inspection related models
model Inspection {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String?  @map("descripcion") @db.Text
  observation String?  @map("observacion") @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  equipmentId Int       @map("equipment_id")
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  employeeId Int      @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])

  inspectionTypeId Int?            @map("inspection_type_id")
  inspectionType   InspectionType? @relation(fields: [inspectionTypeId], references: [id])

  @@index([equipmentId])
  @@index([employeeId])
  @@index([inspectionTypeId])
  @@map("inspections")
}

model InspectionType {
  id          Int     @id @default(autoincrement())
  name        String  @unique @map("nombre")
  description String? @map("descripcion")

  // Relations
  inspections Inspection[]

  @@map("inspection_types")
}

// Parts and Products related models
model Part {
  id          Int     @id @default(autoincrement())
  code        String? @map("codigo")
  information String? @map("info")
  brand       String? @map("brand")
  partName    String? @map("parte")

  // Relations
  companies  PartOrderCompany[]
  models     PartOrderEquipmentModel[]
  equipments PartOrderEquipment[]

  @@map("parts")
}

model PartOrderCompany {
  // Relations
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int     @map("company_id")

  part   Part @relation(fields: [partId], references: [id])
  partId Int  @map("part_id")

  @@id([companyId, partId])
  @@map("part_company")
}

model PartOrderEquipmentModel {
  // Relations
  model   EquipmentModel @relation(fields: [modelId], references: [id])
  modelId Int            @map("model_id")

  part   Part @relation(fields: [partId], references: [id])
  partId Int  @map("part_id")

  @@id([modelId, partId])
  @@map("part_equipment_model")
}

model PartOrderEquipment {
  // Relations
  part   Part @relation(fields: [partId], references: [id])
  partId Int  @map("part_id")

  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int       @map("equipment_id")

  @@id([equipmentId, partId])
  @@map("part_equipment")
}

model Product {
  id           Int     @id @default(autoincrement())
  name         String  @map("nombre")
  code         String? @map("codigo")
  brand        String? @map("brand")
  information  String? @map("info")
  presentation Int?    @map("presentacion")

  // Relations
  companies ProductCompany[]

  @@map("products")
}

model ProductCompany {
  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int     @map("company_id")

  @@id([productId, companyId])
  @@map("product_company")
}

// Additional models
model Presentation {
  id          Int     @id @default(autoincrement())
  name        String  @map("nombre")
  code        String? @map("codigo")
  information String? @map("info")

  @@map("presentations")
}

model Tire {
  id          Int     @id @default(autoincrement())
  size        String? @map("medida")
  information String? @map("info")

  @@map("tires")
}

model Brand {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  information String?
  code        String  @unique
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("brands")
  @@index([name])
}

model Unit {
  id           Int     @id @default(autoincrement())
  name         String
  abbreviation String  @unique
  isActive     Boolean @default(true)

  @@map("units")
  @@index([name])
}